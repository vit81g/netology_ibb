
1. Какие баги были выявлены: количество, описание, почему SonarQube их считает багами? См. ссылку Why is this an issue?.
a) Один баг был найден
б) Описание - повторное использование переменной в приватном методе "private static void"
в) Начальные значения переменных foreach не должны игнорироваться, необходимо создать новую переменную

2. Какие уязвимости были выявлены: количество, категории, описание, почему SonarQube их считает уязвимостями?
а) Одна уязвимость найдена
б) Категория - Blocker. Блокирует всю работу над продуктом, до исправления.
в) Описание - база данных не защищена паролем.
г) Базы данных должны быть защищены паролем. Использование соединения с базой данных с пустым паролем является явным признаком того, что база данных не защищена.

3. Какие Security Hotspots были выявлены: количество, категории, приоритет, описание, почему SonarQube их считает Security HotSpot'ами?
а) Выявлен один Security Hotspots
б) Категория - Insecure Configuration (небезопасная конфигурация)
в) Приоритет - Low (низкий)
г) Описание - предоставление кода в рабочей среде с активированными функциями отладки
д) Функции отладки приложения позволяют разработчикам легче находить ошибки и, таким образом, облегчают работу злоумышленников. Часто он дает доступ к подробной информации как о системе, в которой запущено приложение, так и о пользователях.

4. К каким CWE идёт отсылка для Security Hotspots из п. 2? См. вкладку How can you fix it? в нижней части страницы.
OWASP Top 10 2017 Category A3 - Sensitive Data Exposure
MITRE, CWE-489 - Leftover Debug Code
MITRE, CWE-215 - Information Exposure Through Debug Information


5. Какие запахи кода были выявлены: количество, описание, почему SonarQube их считает запахами кода? См. ссылку Why is this an issue?.
а) Выявлено: 5 Code Smell 

5.1 Неиспользованный импорт 'java.io.IOException'.
Неиспользованный и бесполезный импорт необходимо исключить.
Если их оставить, код станет менее читабельным, поскольку их присутствие может сбивать с толку.

5.2 Стандартные выходные данные не должны использоваться напрямую для регистрации чего-либо. System.out.println(authorization)
Если программа напрямую записывает данные в стандартный вывод, абсолютно невозможно выполнить эти требования. Вот почему настоятельно рекомендуется определить и использовать специальный регистратор.

5.3 Логические выражения не должны быть беспочвенными. clean = true; Выражение всегда истинно.
Если логическое выражение не изменяет оценку условия, то оно совершенно не нужно и может быть удалено. Если оно является необоснованным, поскольку не соответствует замыслу программиста, то это ошибка, и выражение следует исправить.

5.4 Generic exceptions should never be thrown (Общие исключения никогда не должны создаваться). throw new RuntimeException(e);
Использование таких универсальных исключений, как Error, RuntimeException, Throwable и Exception, не позволяет вызывающим методам обрабатывать истинные системные исключения иначе, чем ошибки, генерируемые приложением. 

5.5 Generic exceptions should never be thrown (Общие исключения никогда не должны создаваться). throw new RuntimeException(e);
Использование таких универсальных исключений, как Error, RuntimeException, Throwable и Exception, не позволяет вызывающим методам обрабатывать истинные системные исключения иначе, чем ошибки, генерируемые приложением.
