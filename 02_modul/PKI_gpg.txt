https://github.com/netology-code/ibb-homeworks/tree/v2/08_crypto_assymetric

Инструкция

Общая логика работы с OpenPGP выглядит следующим образом:

    Генерация хэша сообщения
    Шифрование хэша с помощью вашего приватного ключа (подпись)
    Отправка сообщения и подписи получателю
    Верификация подписи и содержимого сообщения получателем (с использованием вашего публичного ключа)

Это значит, что первое, что нам нужно сделать - это сгенерировать ключевую пару (keypair*).

Примечание*: мы будем использовать и русскоязычную, и англоязычную терминологию, поскольку нам придётся работать с обеими.

Чтобы себя идентифицировать, пользователи в рамках OpenPGP создают UID (User ID):

    Имя
    Email
    Комментарий

GnuGP сохраняет всю информацию в вашем домашнем каталоге - $HOME/.gnupg (для Cygwin $HOME так же будет работать).

Справку по работе с командой можно получить следующим образом:

gpg --help

Общий вид команд выглядит следующим образом: gpg [command] [file].

Важно: скриншоты команд будут приведены из Cygwin, там команда gpg2, для ОС Linux и Mac следует использовать gpg (без двойки).
Шаг 1. Генерация keypair

gpg --full-generate-key

В диалоговом окне:

    Выберите тип ключа: RSA и RSA
    Размер ключа: 2048
    Срок действия ключа - 0 (не ограничен)

Далее введите:

    Имя (ваше реальное имя)
    Email
    Комментарий оставьте пустым
    
    осле чего вас попросят ввести passphrase для защиты ключа.
Шаг 2. Просмотр ключей

gpg --list-keys
# либо в коротком формате:
gpg -k

Шаг 3. Подпись сообщения

Создайте текстовый файл с сегодняшней датой в любом формате и сохраните его в файле message.txt.

Подпишите его следующей командой (подпись будет создана в виде отдельного файла):

gpg --output message.sig --local-user coursar@localhost --detach-sign message.txt

Где coursar@localhost - это email, который вы указали на первом шаге.

Проверьте, что подпись соответствует сообщению с помощью команды:

gpg --verify message.sig message.txt

Шаг 4. Проверка подписи (ложное сообщение)

Создайте текстовый файл modified.txt и измените в нём дату на вчерашнюю.

Удостоверьтесь, что проверка подписи теперь не проходит:

gpg --verify message.sig modified.txt

Шаг 5. Экспорт публичного ключа

Для того, чтобы остальные пользователи могли проверять подпись ваших сообщений, вы должны им предоставить ваш публичный ключ.

Для этого нужно его экспортировать с помощью следующей команды:

gpg --output public.gpg --armor --export coursar@localhost

Где coursar@localhost - это email, который вы указали на первом шаге.

По умолчанию, ключ экспортируется в бинарном формате. Опция --armor позволяет экспортировать его в текстовом виде.
Результат

В качестве результата пришлите:

    Публичный ключ (с шага 5)
    Файл сообщения и подпись к нему (с шага 3)

