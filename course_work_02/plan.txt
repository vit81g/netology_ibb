1. Планирование
1.1 Проверка автоматическими тестами SAST двух репозитариев на gitlab.com - 1 день
1.4 Ручная проверка кода репозитариев - 3 дней

2. Выполнение
2.1 Анализ выявленных, с помощью автоматических тестов,  уязвимостей - 1 день
2.2 Запуск на ВМ и непосредственная работа с приложением, поиск уязвимостей. Инструменты Wareshark, burpsuite - 2 дня

3 Подготовка отчета
3.1 стандарты ГОСТ Р 58412-2019, ГОСТ Р ИСО/МЭК 12207-2010, ГОСТ Р 56939-2016
3.2 стандартф безопасности GDPR, PCI DSS
3.3 Методические рекомендации по обеспечению информационной безопасности при создании и эксплуатации открытых репозиториев программного обеспечения от Минцифры РФ

****************************************************************************

При анализе кода был применен метод SAAT (Static Application Security Testing) - статический анализатор исходного кода
1. Были выявлены следующие уязвимости в netology-code/necommerce-backend:
13 критических уязвимостей, 25 уязвимостей высокого уровня и 21 уязвимость среднего уровня (все связаны с docker)
Решение:
использование стандартного дистрибутива операционной системы, установить его на «голую» машину, поставить необходимые пакеты и исправления, создать "идеальный" docker-образ.

1 уязвимость высокого уровня в коде:
src/main/kotlin/ru/netology/necommerce/config/AppWebSecurityConfigurerAdapter.kt
Cross-Site Request Forgery (CSRF) CWE-352
Для защиты от атак CSRF надо:
а) На сервере реализовать механизм «CSRF токенов». Это такой механизм, когда для каждой сессии пользователя генерируется новый токен и сервер проверяет его валидность при любых запросах с клиента.
б) На сервере проверять заголовки Origin и Referer, в которых содержится адрес источника запроса. Но эти заголовки могут отсутствовать.
в) Также можно всегда требовать от пользователя подтверждать критические действия вводом пароля или вторым фактором аутентификации. 



2. Были выявлены следующие уязвимости в netology-code/necommerce-frontend:
1 критическая уязвимость, 2 уязвимости высокого уровня, 1 уязвимость среднего уровня (все связаны с docker)
Решение:
использование стандартного дистрибутива операционной системы, установить его на «голую» машину, поставить необходимые пакеты и исправления, создать "идеальный" docker-образ.

23 уязвимости высокого уровня, 33 уязвимости среднего уровня связанных с package.json
5 уязвимостей можно устранить сразу (решение принято на основе данных snyk.io)

****************************************************************************

В ходе запуска и тестирования готового ПО применялся метод DAST (Dynamic Application Security Testing) ???


****************************************************************************

В ходе эксплуатации ПО были проведены тесты по OWASP

****************************************************************************

Отчет:

При разработке программного продукта не учтены требования по информационной безопасности стандарта PCI DSS и GDPR
1. Клиентские сетевые потоки данных должны передаваться в зашифрованном виде.
Критичные данные должны передаваться по шифрованному каналу. Сетевые критичные данные должны передаваться по шифрованному каналу. Формально достаточно использование протокола безопасности TLS, но лучше обеспечить шифрование передаваемой информации на уровне ПО

Necommerce - канал передачи данных между клинетом и сервером не зашифрован

2. Базы данных должны размещаться в отдельной подсети от подсети приложений.
Для уменьшения рисков утечки критичных данных, БД должны размещаться отдельно от подсети, в которой размещены приложения. Учитывая повсеместную виртуализацию, рекомендуется также рассмотреть возможность дополнительного разделения БД и приложений. 

Necommerce - БД находиться на одном сервере с программой

3. Проверка на OWASP TOP 10

Necommerce - не проходил проверку

4. Требования к стойкости пароля.
Должны выбираться пароли которые не поддаются атаке перебором. Хранение и передача паролей должна быть обеспечена таким образом, чтобы минимизировать вероятность его компрометации (парольные хранилища, раздельное хранение и пр). 

Necommerce - отсутствует требования по стойкости пароля

Требования методических рекомендаций по обеспечению информационной безопасности при создании и эксплуатации открытых репозиториев программного обеспечения:
1. Реализация выявления уязвимостей ПО. Привлечение сторонних экспертов для иследования ПО.  
сервис по выявлению уязвимостей программных проектов, размещенных в открытом репозитории программного обеспечения, с возможностью привлечения независимых экспертов и исследователей программного обеспечения за вознаграждение (багбаунти). Порядок участия экспертов и исследователей программного обеспечения определяется правилами использования сервиса, выбранного оператором открытого репозитория программного обеспечения

Necommerce - не реализовано



как вы будете это проверять: инструменты, подходы, используемые нормативные документы, стандарты или руководства;

317 str безопасная разработка

