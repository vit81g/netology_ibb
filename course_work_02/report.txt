При анализе кода был применен метод SAST (Static Application Security Testing) - статический анализатор исходного кода
1. Были выявлены следующие уязвимости в netology-code/necommerce-backend:
13 критических уязвимостей, 25 уязвимостей высокого уровня и 21 уязвимость среднего уровня (все связаны с docker)
Решение:
использовать стандартный дистрибутив операционной системы, установить его на «голую» машину, поставить необходимые пакеты и исправления, создать "идеальный" docker-образ.

Одна уязвимость высокого уровня в коде:
src/main/kotlin/ru/netology/necommerce/config/AppWebSecurityConfigurerAdapter.kt
Cross-Site Request Forgery (CSRF) CWE-352
Для защиты от атак CSRF необходимо:
а) На сервере реализовать механизм «CSRF токенов». Это такой механизм, когда для каждой сессии пользователя генерируется новый токен и сервер проверяет его валидность при любых запросах с клиента.
б) На сервере проверять заголовки Origin и Referer, в которых содержится адрес источника запроса. Но эти заголовки могут отсутствовать.
в) Также необходимо всегда требовать от пользователя подтверждать критические действия вводом пароля или вторым фактором аутентификации. 

2. Были выявлены следующие уязвимости в netology-code/necommerce-frontend:
1 критическая уязвимость, 2 уязвимости высокого уровня, 1 уязвимость среднего уровня (все связаны с docker)
Решение:
использовать стандартный дистрибутив операционной системы, установить его на «голую» машину, поставить необходимые пакеты и исправления, создать "идеальный" docker-образ.

Найденные уязвимости package.json:
23 уязвимости высокого уровня, 33 уязвимости среднего уровня связанных с package.json
5 уязвимостей можно устранить и 10 уязвимостей можно частично исправить (решение принято на основе данных snyk.io)

Отчет о выявленных проблемах и рекомендациях по их исправлению, для предотвращения недопустимых событий в ходе эксплуатации уязвимостей в программном продукте Necommerce:

При разработке программного продукта не были учтены следующие требования по информационной безопасности стандарта PCI DSS, ГОСТ Р 58412 - 2019: 

1. Клиентские сетевые потоки данных должны передаваться в зашифрованном виде (пункт 4.1.с PCI DSS).
Критичные данные должны передаваться по шифрованному каналу. Сетевые критичные данные должны передаваться по шифрованному каналу. Формально, достаточно использование протокола безопасности TLS, но предпочтительнее обеспечить шифрование передаваемой информации на уровне ПО

Necommerce - канал передачи данных между клиентом и сервером не зашифрован.

2. Базы данных должны размещаться в подсети, отдельной от подсети приложений (пункт 1.3.6 PCI DSS).
Для уменьшения рисков утечки критичных данных, БД должны размещаться отдельно от подсети, в которой размещены приложения. Учитывая повсеместную виртуализацию, рекомендуется также рассмотреть возможность дополнительного разделения БД и приложений. 

Necommerce - БД находится на одном сервере с программой.

3. Проверка на OWASP (рекомендация PCI DSS)

Necommerce - проект не проходил проверку на основные угрозы OWASP. 

4. Требования к стойкости пароля (пункт 8.2.3 PCI DSS).
Должны выбираться пароли, которые не поддаются атаке перебором. Хранение и передача пароля должна быть обеспечена таким образом, чтобы минимизировать вероятность его компрометации (парольные хранилища, раздельное хранение и пр.). 

Necommerce - не обеспечено соответствие паролей требованиям безопасности.

5. Требования ГОСТ Р 58412—2019 "Национальный стандарт Российской Федерации. Защита информации. Разработка безопасного программного обеспечения. Угрозы безопасности информации при разработке программного обеспечения":
5.1 Угроза внедрения уязвимостей программы в исходный код программы в ходе его разработки (пункт 5.3.1 ГОСТ Р 58412—2019)
Данная угроза заключается в преднамеренном или непреднамеренном внедрении в исходный код программы ошибок (недостатков), которые при условии их не обнаружения или не исправления могут стать причиной появления уязвимостей программы 
Угроза обусловлена недостатками в реализованных разработчиком ПО мерах контроля доступа и контроля целостности, применяемых к объектам среды разработки ПО, и мерах по разработке безопасного ПО, в частности: некачественным или неполным проведением статического анализа или экспертизы исходного кода программы, не учётом при создании программы проекта архитектуры программы и/или порядка оформления исходного кода программы, недостатками в мерах, связанных с управлением конфигурацией ПО, обучением работников разработчика ПО в области разработки безопасного ПО и проведением систематического поиска уязвимостей программы.

Нарушения в создании docker образов, в коде обнаружены уязвимости

5.2 Угрозы безопасности информации при выполнении квалификационного тестирования программного обеспечения (пункт 5.4 ГОСТ Р 58412—2019)
Угроза выявления уязвимостей вследствие раскрытия информации о тестировании программного обеспечения (пункт 5.4.2 ГОСТ Р 58412—2019) 
Данная угроза заключается в преднамеренном или непреднамеренном раскрытии информации, связанной с тестированием ПО (планы тестирования, описание выполняемых тестов и инструментальных средств, используемых для тестирования программы, фактические результаты тестирования, перечень выявленных при тестировании ПО уязвимостей программы и ошибок ПО). Нарушение конфиденциальности данной информации может способствовать выявлению недостатков ПО и уязвимостей программы, которые в дальнейшем могут быть использованы с целью выполнения компьютерных атак на информационные системы пользователей, применяющих ПО.

Нарушения в игнорировании выявленных уязвимостей в ходе статического тестирования (SAST)

5.3 Угрозы безопасности информации при выполнении инсталляции программы и поддержки приемки программного обеспечения (пункт 5.5 ГОСТ Р 58412—2019)
Угроза внедрения уязвимостей в обновления программного обеспечения (пункт 5.5.3 ГОСТ Р 58412—2019)
Данная угроза заключается в получении пользователем обновлений ПО, содержащих внедренные уязвимости программы или уязвимости программы, появившиеся в результате ошибок или неквалифицированных действий работников разработчика ПО при определении и реализации процедуры обновления ПО. Уязвимости программы могут быть внедрены в обновления компонентов ПО собственной
разработки, а также в обновления компонентов ПО, которые заимствуют у сторонних разработчиков ПО. Внедрение уязвимостей программы может быть осуществлено путем модификации (включая подмену) обновлений ПО при их передаче пользователю из среды разработки ПО, при их передаче пользователю из среды разработки стороннего разработчика ПО и при их передаче разработчику из среды разработки стороннего разработчика ПО. Уязвимости программы могут быть внедрены в обновления заимствованных у сторонних разработчиков ПО компонентов путем их модификации в среде разработки стороннего разработчика ПО. Внедренные уязвимости программы в дальнейшем могут быть использованы нарушителем с целью выполнения компьютерных атак на информационную систему пользователя.

Нарушения в создании docker образов - наличие не обновлённого программного обеспечения с выявленными уязвимостями

5.4 Угрозы безопасности информации при решении проблем в программном обеспечении (пункт 5.6 ГОСТ Р 58412—2019)
в процессе эксплуатации
Угроза не исправления обнаруженных уязвимостей программы (пункт 5.6.1 ГОСТ Р 58412—2019)
Данная угроза заключается в том, что обнаруженные ошибки ПО, которые могут стать причиной появления уязвимостей, не исправляют или исправляют несвоевременно вследствие неквалифицированных действий работников разработчика при определении и реализации процедур отслеживания и исправления обнаруженных ошибок ПО.
Угроза обусловлена недостатками в реализованных разработчиком ПО механизмах контроля доступа к объектам среды разработки ПО и контроля целостности объектов среды разработки ПО, а также мерах по разработке безопасного ПО, в частности: отсутствием мер, связанных с решением проблем в ПО в процессе эксплуатации, недостатками в процедурах, связанных с отслеживанием и исправлением обнаруженных ошибок ПО и обучением работников разработчика ПО в области разработки безопасного ПО

Нарушения в игнорировании выявленных уязвимостей и/или отсутствии компенсационных мер по недопустимости реализации уязвимости. Выявленные в ходе тестов (SAST) уязвимости не отслеживаются и не исправляются

5.5 Рекомендации в соответствии с ГОСТ Р 58412—2019:
Создание (выбор) и использование при создании программы порядка оформления исходного кода программы;
На стадии разработки регулярно проводить статический анализ исходного кода программы;
Внедрить практику экспертизы исходного кода программы сторонними экспертами в области ИБ;
Проведение систематического поиска уязвимостей программы и своевременное устранение уязвимостей;
Ввести в организации определение, документирование и соблюдение политики информационной безопасности;
Организовать периодическое обучение работников и периодический анализ программы обучения работников;
Ввести в практику регистрацию выявленных уязвимостей, отслеживание их устранения.
Регулярное проведение систематического поиска уязвимостей программы;
Использование системы управления конфигурацией ПО;
Защита от несанкционированного доступа к элементам конфигурации;
Внедрить на стадии разработки регистрацию событий, связанных с фактами изменения элементов конфигурации;

6. Итог:
6.1 Ввести практику регулярного обучения сотрудников стандартам и требованиям ИБ, качеству кода.
6.2 На этапе планирования учесть требования и оценить риски связанные с безопасностью.
6.3 На этапе разработки обязательно отрабатывать результаты анализа SATS.
6.3.1 Убрать ложные срабатывания, устранить уязвимости, проверить исправления.
6.3.2 Проверить версии зависимостей на наличие уязвимостей.
6.4 На этапе тестирования проверять приложения специальными инструментами, призванными в автоматизированном режиме выявлять типичные уязвимости.
6.5 На этапе тестирования необходимо устранить уязвимости, имеющие критический и высокий уровень опасности.
6.6 Перед выпуском релиза рекомендуется устранить уязвимости, имеющие уровень опасности средний.
6.7 К следующему релизу рекомендуется устранить уязвимости с уровнем опасности низкий и инфо.

