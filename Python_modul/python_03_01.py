# Мы делаем MVP dating-сервиса, и у нас есть список парней и девушек (их число может варьироваться):
# boys = ['Peter', 'Alex', 'John', 'Arthur', 'Richard']
# girls = ['Kate', 'Liza', 'Kira', 'Emma', 'Trisha']

# Выдвигаем гипотезу: лучшие рекомендации мы получим, если просто отсортируем имена по алфавиту и 
# познакомим людей с одинаковыми индексами после сортировки! "Познакомить" пары нам поможет функция zip,
# а в цикле распакуем zip-объект и выведем информацию в виде:

# Идеальные пары:
# Alex и Emma
# Arthur и Kate
# John и Kira
# Peter и Liza
# Richard и Trisha

# Внимание! Если количество людей в списках будет не совпадать, то мы никого знакомить не будем и 
# выведем пользователю предупреждение, что кто-то может остаться без пары!

# РЕШЕНИЕ (ЦИКЛЫ, ЗАДАЧА 1)

boys = ['Peter', 'Alex', 'John', 'Arthur', 'Richard']
girls = ['Kate', 'Liza', 'Kira', 'Emma', 'Trisha']

# Сортировка списков
boys_new = sorted(boys)
girls_new = sorted(girls)

# Объединение списков
daiting_list = list(zip(boys, girls))

# Длинна списка
len_list = len(daiting_list)

# Переменная для цикла While
i = 0

print('Идеальные пары:')

# Цикл перебор элементов с учетом длинны списка и требования задания
while i < len_list:
    a = daiting_list[i]
    print(a[0], 'и', a[1])
    i+=1


